#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.13.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint
if sys.version_info[0] > 2:
    from urllib.parse import urlparse
else:
    from urlparse import urlparse
from thrift.transport import TTransport, TSocket, TSSLSocket, THttpClient
from thrift.protocol.TBinaryProtocol import TBinaryProtocol

from PA2 import Node
from PA2.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
    print('')
    print('Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] [-s[sl]] [-novalidate] [-ca_certs certs] [-keyfile keyfile] [-certfile certfile] function [arg1 [arg2...]]')
    print('')
    print('Functions:')
    print('  NodeInfo findSuccessor(i32 id)')
    print('  NodeInfo findPredecessor(i32 id)')
    print('  string Put(string word, string meaning)')
    print('  string Get(string word)')
    print('  NodeInfo successor()')
    print('  NodeInfo predecessor()')
    print('  void setPredecessor(NodeInfo pred)')
    print('  NodeInfo closest_preceding_finger(i32 id)')
    print('  void init_finger_table(NodeInfo newNodeInfo)')
    print('  void update_finger_table(NodeInfo s, i32 i)')
    print('  void update_others()')
    print('  void setWord(string word, string meaning)')
    print('  string getWord(string word)')
    print('  void UpdateDHT()')
    print('  void join(NodeInfo randomNode)')
    print('  void setSuccessor(NodeInfo succ)')
    print('')
    sys.exit(0)

pp = pprint.PrettyPrinter(indent=2)
host = 'localhost'
port = 9090
uri = ''
framed = False
ssl = False
validate = True
ca_certs = None
keyfile = None
certfile = None
http = False
argi = 1

if sys.argv[argi] == '-h':
    parts = sys.argv[argi + 1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    argi += 2

if sys.argv[argi] == '-u':
    url = urlparse(sys.argv[argi + 1])
    parts = url[1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    else:
        port = 80
    uri = url[2]
    if url[4]:
        uri += '?%s' % url[4]
    http = True
    argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
    framed = True
    argi += 1

if sys.argv[argi] == '-s' or sys.argv[argi] == '-ssl':
    ssl = True
    argi += 1

if sys.argv[argi] == '-novalidate':
    validate = False
    argi += 1

if sys.argv[argi] == '-ca_certs':
    ca_certs = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-keyfile':
    keyfile = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-certfile':
    certfile = sys.argv[argi+1]
    argi += 2

cmd = sys.argv[argi]
args = sys.argv[argi + 1:]

if http:
    transport = THttpClient.THttpClient(host, port, uri)
else:
    if ssl:
        socket = TSSLSocket.TSSLSocket(host, port, validate=validate, ca_certs=ca_certs, keyfile=keyfile, certfile=certfile)
    else:
        socket = TSocket.TSocket(host, port)
    if framed:
        transport = TTransport.TFramedTransport(socket)
    else:
        transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol(transport)
client = Node.Client(protocol)
transport.open()

if cmd == 'findSuccessor':
    if len(args) != 1:
        print('findSuccessor requires 1 args')
        sys.exit(1)
    pp.pprint(client.findSuccessor(eval(args[0]),))

elif cmd == 'findPredecessor':
    if len(args) != 1:
        print('findPredecessor requires 1 args')
        sys.exit(1)
    pp.pprint(client.findPredecessor(eval(args[0]),))

elif cmd == 'Put':
    if len(args) != 2:
        print('Put requires 2 args')
        sys.exit(1)
    pp.pprint(client.Put(args[0], args[1],))

elif cmd == 'Get':
    if len(args) != 1:
        print('Get requires 1 args')
        sys.exit(1)
    pp.pprint(client.Get(args[0],))

elif cmd == 'successor':
    if len(args) != 0:
        print('successor requires 0 args')
        sys.exit(1)
    pp.pprint(client.successor())

elif cmd == 'predecessor':
    if len(args) != 0:
        print('predecessor requires 0 args')
        sys.exit(1)
    pp.pprint(client.predecessor())

elif cmd == 'setPredecessor':
    if len(args) != 1:
        print('setPredecessor requires 1 args')
        sys.exit(1)
    pp.pprint(client.setPredecessor(eval(args[0]),))

elif cmd == 'closest_preceding_finger':
    if len(args) != 1:
        print('closest_preceding_finger requires 1 args')
        sys.exit(1)
    pp.pprint(client.closest_preceding_finger(eval(args[0]),))

elif cmd == 'init_finger_table':
    if len(args) != 1:
        print('init_finger_table requires 1 args')
        sys.exit(1)
    pp.pprint(client.init_finger_table(eval(args[0]),))

elif cmd == 'update_finger_table':
    if len(args) != 2:
        print('update_finger_table requires 2 args')
        sys.exit(1)
    pp.pprint(client.update_finger_table(eval(args[0]), eval(args[1]),))

elif cmd == 'update_others':
    if len(args) != 0:
        print('update_others requires 0 args')
        sys.exit(1)
    pp.pprint(client.update_others())

elif cmd == 'setWord':
    if len(args) != 2:
        print('setWord requires 2 args')
        sys.exit(1)
    pp.pprint(client.setWord(args[0], args[1],))

elif cmd == 'getWord':
    if len(args) != 1:
        print('getWord requires 1 args')
        sys.exit(1)
    pp.pprint(client.getWord(args[0],))

elif cmd == 'UpdateDHT':
    if len(args) != 0:
        print('UpdateDHT requires 0 args')
        sys.exit(1)
    pp.pprint(client.UpdateDHT())

elif cmd == 'join':
    if len(args) != 1:
        print('join requires 1 args')
        sys.exit(1)
    pp.pprint(client.join(eval(args[0]),))

elif cmd == 'setSuccessor':
    if len(args) != 1:
        print('setSuccessor requires 1 args')
        sys.exit(1)
    pp.pprint(client.setSuccessor(eval(args[0]),))

else:
    print('Unrecognized method %s' % cmd)
    sys.exit(1)

transport.close()
